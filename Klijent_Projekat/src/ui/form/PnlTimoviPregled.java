/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.form;

import communication.KomunikacijaSaServerom;
import controller.GUIKordinator;
import domain.Tim;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import ui.table.model.TimoviTableModel;

/**
 *
 * @author Nikola
 */
public class PnlTimoviPregled extends javax.swing.JPanel {

    /**
     * Creates new form PnlTimoviPregled
     */
    public PnlTimoviPregled() throws Exception {
        initComponents();
        pripremiPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblIzborTimova = new javax.swing.JTable();
        txtPretraga = new javax.swing.JTextField();
        btnPretrazi = new javax.swing.JButton();
        btnDetaljiTima = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Pregled timova"));
        setToolTipText("");

        tblIzborTimova.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblIzborTimova);

        txtPretraga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPretragaKeyReleased(evt);
            }
        });

        btnPretrazi.setText("Pretrazi");
        btnPretrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziActionPerformed(evt);
            }
        });

        btnDetaljiTima.setText("Detalji");
        btnDetaljiTima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetaljiTimaActionPerformed(evt);
            }
        });

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretrazi:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDetaljiTima, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtPretraga)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPretrazi)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPretraga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretrazi)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetaljiTima)
                    .addComponent(btnObrisi))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPretraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziActionPerformed
        // TODO add your handling code here:
        try {
            String s = txtPretraga.getText();
            List<Tim> lista = KomunikacijaSaServerom.getInstanca().vratiTimove(s);
            tblIzborTimova.setModel(new TimoviTableModel(lista));

            //izbrisi();
            //isprazni();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da izvrsi pretragu!", "Greska", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PnlHakatonPregled.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnPretraziActionPerformed

    private void btnDetaljiTimaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetaljiTimaActionPerformed
        // TODO add your handling code here:
        try {
            if (validacijaTabele()) {
                TimoviTableModel ttm = (TimoviTableModel) tblIzborTimova.getModel();
                Tim t = ttm.getTim(tblIzborTimova.getSelectedRow());
                GUIKordinator.getInstance().getMap().put("izabrani_tim", t);
                FrmDetaljiTim fDetalji = new FrmDetaljiTim((FrmAdminGlavna) SwingUtilities.getWindowAncestor(this), true, ModFormeDetalji.SHOW);
                fDetalji.setVisible(true);
            } else {

                JOptionPane.showMessageDialog(this, "Izaberite tim!", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                TimoviTableModel ttm = (TimoviTableModel) tblIzborTimova.getModel();
                List<Tim> lista = ttm.getLista();
                if (!lista.isEmpty()) {
                    tblIzborTimova.setRowSelectionInterval(0, 0);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da prikaze detalje o timu", "Greska", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_btnDetaljiTimaActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        // TODO add your handling code here:
        try {
            if (validacijaTabele()) {
                int input = JOptionPane.showConfirmDialog(null,
                        "Da li ste sigurni da zelite da obrisete sudiju?",
                        "Potvrda brisanja", JOptionPane.YES_NO_CANCEL_OPTION);
                switch (input) {
                    case 0:
                        TimoviTableModel ttm = (TimoviTableModel) tblIzborTimova.getModel();
                        Tim t = ttm.getTim(tblIzborTimova.getSelectedRow());
//                        List<Clan> clanovi = KomunikacijaSaServerom.getInstanca().vratiClanoveZaTim(t);
//                        for (Clan clan : clanovi) {
//                            KomunikacijaSaServerom.getInstanca().obrisiClana(clan);
//                        }
                        KomunikacijaSaServerom.getInstanca().obrisiTim(t);
                        JOptionPane.showMessageDialog(this, "Sistem je obrisao tim!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    default:
                        break;

                }

            } else {
                JOptionPane.showMessageDialog(this, "Izaberite tim!", "Obavestenje", JOptionPane.INFORMATION_MESSAGE);
                TimoviTableModel ttm = (TimoviTableModel) tblIzborTimova.getModel();
                List<Tim> lista = ttm.getLista();
                if (!lista.isEmpty()) {
                    tblIzborTimova.setRowSelectionInterval(0, 0);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da obrise tim!", "Greska", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_btnObrisiActionPerformed

    private void txtPretragaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPretragaKeyReleased
        try {
            // TODO add your handling code here:
            String s = txtPretraga.getText();
            List<Tim> lista = KomunikacijaSaServerom.getInstanca().vratiTimove(s);
            tblIzborTimova.setModel(new TimoviTableModel(lista));
        } catch (Exception ex) {
            Logger.getLogger(PnlTimoviPregled.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtPretragaKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetaljiTima;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnPretrazi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblIzborTimova;
    private javax.swing.JTextField txtPretraga;
    // End of variables declaration//GEN-END:variables

    private boolean validacijaTabele() {
        int selectedRow = tblIzborTimova.getSelectedRow();
        return selectedRow != -1;
    }

    private void pripremiPanel() throws Exception {
        String s = txtPretraga.getText();
        List<Tim> lista = KomunikacijaSaServerom.getInstanca().vratiTimove(s);
        tblIzborTimova.setModel(new TimoviTableModel(lista));
    }
}
